---
import PageLayout from '../../layouts/BaseLayout.astro'
import PlaylistItem from '../../components/PlaylistItem.astro'

// In a real-world scenario, you'd want to securely manage this key
const API_KEY = process.env.API_KEY
const PLAYLIST_ID = process.env.PLAYLIST_ID
let playlistItems = [] // Initialize to an empty array
interface YouTubePlaylistItem {
	snippet: {
		title: string
		thumbnails: {
			medium: {
				url: string
			}
		}
		resourceId: {
			videoId: string
		}
	}
}

try {
	const response = await fetch(
		`https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${API_KEY}`
		// `https://music.youtube.com/playlist?list=PL2Xhxab5p6pkDbJ6MeioLf70F2FBEmQLt`
	)

	if (!response.ok) {
		throw new Error(`HTTP error! Status: ${response.status}`)
	}

	const data = await response.json()

	// Log the entire response for debugging
	console.log('YouTube API Response:', data)

	if (data.items) {
		playlistItems = data.items
	} else {
		console.warn('No items found in the playlist response.')
	}
} catch (error) {
	console.error('Error fetching playlist:', error)
	// Optionally, display an error message to the user
}

const meta = {
	description: 'Media Choices',
	title: 'Music'
}
---

<PageLayout meta={meta}>
	<main class='container mx-auto px-4 py-8'>
		<p>
			You can take these as recommendations but its really just a bunch of stuff i've watched or
			listened to and enjoyed a lot.
		</p>
		<h1 class='mb-6 text-4xl font-bold'>Music</h1>
		<div class='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
			{
				playlistItems.map((item: YouTubePlaylistItem) => {
					const thumbnailUrl = item.snippet?.thumbnails?.medium?.url || '/placeholder.svg'
					return (
						<PlaylistItem
							title={item.snippet?.title || 'No Title'}
							thumbnail={thumbnailUrl}
							videoId={item.snippet?.resourceId?.videoId}
						/>
					)
				})
			}
		</div>
		<h1 class='mb-6 text-4xl font-bold'>Anime</h1>
		<div class='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
			{
				playlistItems.map((item: YouTubePlaylistItem) => {
					const thumbnailUrl = item.snippet?.thumbnails?.medium?.url || '/placeholder.svg'
					return (
						<PlaylistItem
							title={item.snippet?.title || 'No Title'}
							thumbnail={thumbnailUrl}
							videoId={item.snippet?.resourceId?.videoId}
						/>
					)
				})
			}
		</div>
		<h1 class='mb-6 text-4xl font-bold'>Games</h1>
		<div class='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
			{
				playlistItems.map((item: YouTubePlaylistItem) => {
					const thumbnailUrl = item.snippet?.thumbnails?.medium?.url || '/placeholder.svg'
					return (
						<PlaylistItem
							title={item.snippet?.title || 'No Title'}
							thumbnail={thumbnailUrl}
							videoId={item.snippet?.resourceId?.videoId}
						/>
					)
				})
			}
		</div>
	</main>
</PageLayout>
